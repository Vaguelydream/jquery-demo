"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySchemaToLabels = void 0;
const lodash_1 = __importDefault(require("lodash"));
const narrative_schema_label_1 = require("narrative-schema-label");
const unified_1 = __importDefault(require("unified"));
exports.applySchemaToLabels = (narrative) => __awaiter(void 0, void 0, void 0, function* () {
    const lastFile = lodash_1.default.last(narrative.documents);
    if (!lastFile || !narrative.composedNarrativeSchema) {
        return;
    }
    // extract label html
    const labelPlugin = narrative_schema_label_1.applySchemaToLabels(narrative.composedNarrativeSchema);
    for (const file of narrative.documents) {
        const engine = unified_1.default().use(labelPlugin);
        yield engine.run(file.data.root, file);
    }
    const combinedAst = {
        type: "parent",
        children: lodash_1.default.map(narrative.documents, (file) => file.data.root),
    };
    narrative.combinedAst = combinedAst;
});
//# sourceMappingURL=applySchemaToLabels.js.map