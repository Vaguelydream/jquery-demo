"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAndProcessLitvisNarrative = void 0;
const applySchemaToLabels_1 = require("./applySchemaToLabels");
const extractComposedNarrativeSchema_1 = require("./extractComposedNarrativeSchema");
const extractElmEnvironmentSpec_1 = require("./extractElmEnvironmentSpec");
const loadLitvisNarrative_1 = require("./loadLitvisNarrative");
const processElmContexts_1 = require("./processElmContexts");
exports.loadAndProcessLitvisNarrative = (filePath, filesInMemory = [], cache) => __awaiter(void 0, void 0, void 0, function* () {
    const narrative = yield loadLitvisNarrative_1.loadLitvisNarrative(filePath, filesInMemory, cache);
    yield extractElmEnvironmentSpec_1.extractElmEnvironmentSpec(narrative);
    yield extractComposedNarrativeSchema_1.extractComposedNarrativeSchema(narrative);
    yield processElmContexts_1.processElmContexts(narrative, cache);
    yield applySchemaToLabels_1.applySchemaToLabels(narrative);
    return narrative;
});
//# sourceMappingURL=loadAndProcessLitvisNarrative.js.map