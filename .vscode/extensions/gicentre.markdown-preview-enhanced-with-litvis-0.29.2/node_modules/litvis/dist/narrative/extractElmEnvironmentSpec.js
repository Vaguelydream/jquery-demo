"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractElmEnvironmentSpec = void 0;
const fs_extra_1 = require("fs-extra");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = require("path");
exports.extractElmEnvironmentSpec = (narrative) => __awaiter(void 0, void 0, void 0, function* () {
    // resolve litvisElmDependencies and litvisElmSourceDirectories
    const dependencies = {};
    const sourceDirectories = [];
    const checkDirectoryPromises = [];
    lodash_1.default.forEach(narrative.documents, (document) => {
        lodash_1.default.forEach(document.data.litvisElmDependencyVersions, (packageVersion, packageName) => {
            var _a;
            if (packageVersion === false) {
                if (dependencies[packageName]) {
                    delete dependencies[packageName];
                }
                else {
                    document.info(`‘elm.dependencies.${packageName}:’ setting ${packageVersion} to false is only necessary if this packaged is mentioned in upstream documents.`, (_a = document.data.litvisElmDependencyPositions) === null || _a === void 0 ? void 0 : _a[packageName], "litvis:elm-dependencies");
                }
                return;
            }
            dependencies[packageName] = packageVersion;
        });
        const resolvedDirsInThisFile = lodash_1.default.map(document.data.litvisElmSourceDirectoryPaths, (dir) => path_1.resolve(document.dirname || "", dir));
        lodash_1.default.forEach(document.data.litvisElmSourceDirectoryPaths, (dir, index) => {
            var _a;
            const position = (_a = document.data.litvisElmSourceDirectoryPositions) === null || _a === void 0 ? void 0 : _a[index];
            const resolvedDir = resolvedDirsInThisFile[index];
            if (lodash_1.default.indexOf(resolvedDirsInThisFile, resolvedDir) < index) {
                document.info(`‘elm.source-directories[${index}]:’ directory ${dir} is already mentioned above.`, position, "litvis:elm-source-directories");
            }
            else if (lodash_1.default.includes(sourceDirectories, resolvedDir)) {
                document.info(`‘elm.source-directories[${index}]:’ directory ${dir} is already mentioned in an upstream file.`, position, "litvis:elm-source-directories");
            }
            else {
                checkDirectoryPromises.push((() => __awaiter(void 0, void 0, void 0, function* () {
                    try {
                        const directoryStat = yield fs_extra_1.stat(resolvedDir);
                        if (!directoryStat.isDirectory()) {
                            throw new Error();
                        }
                        sourceDirectories.push(resolvedDir);
                    }
                    catch (e) {
                        document.info(`‘elm.source-directories[${index}]:’ ${dir} is not an existing directory and is therefore ignored.`, position, "litvis:elm-source-directories");
                    }
                }))());
            }
        });
    });
    yield Promise.all(checkDirectoryPromises);
    narrative.elmEnvironmentSpecForLastFile = {
        dependencies,
        sourceDirectories,
    };
});
//# sourceMappingURL=extractElmEnvironmentSpec.js.map