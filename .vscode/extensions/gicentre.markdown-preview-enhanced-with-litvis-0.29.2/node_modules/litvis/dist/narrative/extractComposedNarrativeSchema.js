"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractComposedNarrativeSchema = void 0;
const data_with_position_1 = require("data-with-position");
const lodash_1 = __importDefault(require("lodash"));
const narrative_schema_1 = require("narrative-schema");
exports.extractComposedNarrativeSchema = (narrative, filesInMemory = []) => __awaiter(void 0, void 0, void 0, function* () {
    lodash_1.default.forEach(narrative.documents, (document, fileIndex) => {
        const narrativeSchemasWithPosition = document.data.litvisNarrativeSchemasWithPosition;
        if (fileIndex !== 0 && narrativeSchemasWithPosition) {
            document.message(`‘narrative-schemas’ key in frontmatter is only allowed in a root document (the one that does not have ‘follows’). Value ignored.`, data_with_position_1.getPosition(narrativeSchemasWithPosition), "litvis:narrative-schemas");
            return;
        }
    });
    narrative.composedNarrativeSchema = yield narrative_schema_1.loadAndCompose(narrative.documents[0].data.litvisNarrativeSchemasWithPosition, narrative.documents[0], filesInMemory);
});
//# sourceMappingURL=extractComposedNarrativeSchema.js.map