"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadLitvisNarrative = void 0;
const fs_extra_1 = require("fs-extra");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = require("path");
const to_vfile_1 = require("to-vfile");
const vfile_1 = __importDefault(require("vfile"));
const parseDocument_1 = require("../document/parseDocument");
const MAX_CHAIN_LENGTH = 20;
exports.loadLitvisNarrative = (filePath, filesInMemory = [], cache) => __awaiter(void 0, void 0, void 0, function* () {
    // build a chain of files [0]: root,
    const documents = [];
    let currentFilePath = filePath;
    try {
        do {
            if (documents.length === MAX_CHAIN_LENGTH) {
                documents[documents.length - 1].fail(`Too many documents to follow. Please reorganise your narrative by chaining maximum ${MAX_CHAIN_LENGTH} documents.`, documents[documents.length - 1].data.litvisFollowsPosition, "litvis:cross-document");
                break;
            }
            const fileInMemory = lodash_1.default.find(filesInMemory, (f) => f.path === currentFilePath);
            const rawDocument = fileInMemory
                ? vfile_1.default(fileInMemory)
                : yield to_vfile_1.read(currentFilePath, "utf8");
            const document = yield parseDocument_1.parseDocument(rawDocument);
            documents.unshift(document);
            currentFilePath = document.data.litvisFollowsPath
                ? path_1.resolve(document.dirname || "", document.data.litvisFollowsPath)
                : "";
            if (currentFilePath) {
                if (!currentFilePath.match(/\.md$/i)) {
                    currentFilePath = `${currentFilePath}.md`;
                }
                let fileStat;
                try {
                    fileStat = yield fs_extra_1.stat(currentFilePath);
                }
                catch (e) {
                    document.fail(`Document to follow ‘${document.data.litvisFollowsPath}’ does not exist`, document.data.litvisFollowsPosition, "litvis:cross-document");
                }
                if (!fileStat.isFile()) {
                    document.fail(`Document to follow ‘${document.data.litvisFollowsPath}’ is not a file`, document.data.litvisFollowsPosition, "litvis:cross-document");
                }
                if (currentFilePath === document.path) {
                    documents[documents.length - 1].fail(`Litvis document cannot follow itself.`, document.data.litvisFollowsPosition, "litvis:cross-document");
                }
                const sameFileInChain = lodash_1.default.find(documents, (f) => f.path === currentFilePath);
                if (sameFileInChain) {
                    const fileNames = lodash_1.default.reverse(lodash_1.default.map(documents, (f) => f.path));
                    fileNames.push(currentFilePath);
                    documents[documents.length - 1].fail(`Documents are not allowed to follow each other in a cycle ${fileNames.join(" → ")} .`, documents[documents.length - 1].data.litvisFollowsPosition, "litvis:cross-document");
                }
            }
        } while (currentFilePath);
    }
    catch (e) {
        // FIXME: add a single vfile to the list of returned files
        // if the first file does not exist
        if (!e.location /* not a VFileMessage */) {
            try {
                documents[documents.length - 1].fail(e.message);
            }
            catch (e2) {
                // this try/catch is just needed to block throwing in .fail()
            }
        }
    }
    return {
        documents,
    };
});
//# sourceMappingURL=loadLitvisNarrative.js.map