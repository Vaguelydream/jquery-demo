"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDocument = exports.engine = void 0;
const narrative_schema_label_1 = require("narrative-schema-label");
const remark_frontmatter_1 = __importDefault(require("remark-frontmatter"));
const remark_parse_1 = __importDefault(require("remark-parse"));
const unified_1 = __importDefault(require("unified"));
const extractAttributeDerivatives_1 = require("./extractAttributeDerivatives");
const extractOutputItems_1 = require("./extractOutputItems");
const findTripleHatReferences_1 = require("./findTripleHatReferences");
const processFrontmatter_1 = require("./processFrontmatter");
exports.engine = unified_1.default()
    .use(remark_parse_1.default)
    .use(remark_frontmatter_1.default, ["yaml", "toml"])
    .use(findTripleHatReferences_1.findTripleHatReferences)
    .use(extractAttributeDerivatives_1.extractAttributeDerivatives)
    .use(extractOutputItems_1.extractOutputItems)
    .use(processFrontmatter_1.processFrontmatter)
    .use(narrative_schema_label_1.processUnist);
exports.parseDocument = (vFile) => __awaiter(void 0, void 0, void 0, function* () {
    const result = vFile;
    result.data.root = exports.engine.parse(vFile);
    yield exports.engine.run(result.data.root, vFile);
    return result;
});
//# sourceMappingURL=parseDocument.js.map