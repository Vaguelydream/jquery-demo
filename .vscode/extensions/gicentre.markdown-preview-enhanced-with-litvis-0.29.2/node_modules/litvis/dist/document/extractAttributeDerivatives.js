"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAttributeDerivatives = void 0;
const block_info_1 = require("block-info");
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const attributeDerivatives_1 = require("../attributeDerivatives");
const visitCodeBlock = (ast, vFile) => {
    return unist_util_visit_1.default(ast, "code", (codeBlockNode) => {
        if (!codeBlockNode.data) {
            codeBlockNode.data = {};
        }
        const parsedInfo = block_info_1.parseBlockInfo(`${codeBlockNode.lang || ""} ${codeBlockNode.meta || ""}`);
        const normalizedLanguage = (parsedInfo.language || "").trim().toLowerCase();
        if (normalizedLanguage === "elm") {
            const attributeDerivatives = attributeDerivatives_1.extractAttributeDerivatives(parsedInfo.attributes);
            if (attributeDerivatives) {
                codeBlockNode.data.litvisAttributeDerivatives = attributeDerivatives;
                return;
            }
            // if ((codeBlockNode.lang || "").trim().length !== 3) {
            //   vFile.message(
            //     `Could not extract attribute derivatives from ${codeBlockNode.lang}`,
            //     codeBlockNode,
            //     "litvis:code-block-syntax",
            //   );
            // }
            return;
        }
    });
};
const visitTripleHatReference = (ast, vFile) => {
    return unist_util_visit_1.default(ast, "tripleHatReference", (tripleHatReferenceNode) => {
        const parsedInfo = block_info_1.parseBlockInfo(tripleHatReferenceNode.data.info);
        if ((parsedInfo.language || "").toLowerCase() === "elm") {
            const attributeDerivatives = attributeDerivatives_1.extractAttributeDerivatives(parsedInfo.attributes);
            if (attributeDerivatives) {
                tripleHatReferenceNode.data.litvisAttributeDerivatives = attributeDerivatives;
                return;
            }
            vFile.message(`Could not extract attribute derivatives from ${tripleHatReferenceNode.data.info}`, tripleHatReferenceNode, "litvis:triple-hat-reference-syntax");
            return;
        }
        vFile.message(`^^^ must be followed by elm (^^^elm)`, tripleHatReferenceNode, "litvis:triple-hat-reference-syntax");
    });
};
exports.extractAttributeDerivatives = () => {
    return function transformer(ast, vFile, next) {
        visitCodeBlock(ast, vFile);
        visitTripleHatReference(ast, vFile);
        if (typeof next === "function") {
            return next(null, ast, vFile);
        }
        return ast;
    };
};
//# sourceMappingURL=extractAttributeDerivatives.js.map