"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractElmDependencies = void 0;
const data_with_position_1 = require("data-with-position");
const kind_of_1 = __importDefault(require("kind-of"));
const lodash_1 = __importDefault(require("lodash"));
exports.extractElmDependencies = (dataWithPosition, document) => {
    const result = {
        versions: {},
        positions: {},
    };
    const dependenciesWithPosition = lodash_1.default.get(dataWithPosition, [
        "elm",
        "dependencies",
    ]);
    if (!dependenciesWithPosition) {
        return result;
    }
    const dependencies = data_with_position_1.getValue(dependenciesWithPosition);
    if (lodash_1.default.isUndefined(dependencies) || lodash_1.default.isNull(dependencies)) {
        // do not do anything if elm dependencies are not defined
    }
    else if (!lodash_1.default.isPlainObject(dependencies)) {
        document.message(`‘elm.dependencies’ has to be an object, ${kind_of_1.default(dependencies)} given. Value ignored.`, data_with_position_1.getPosition(dependenciesWithPosition), "litvis:frontmatter:elm:dependencies");
    }
    else {
        for (const packageName in dependenciesWithPosition) {
            if (dependenciesWithPosition.hasOwnProperty(packageName)) {
                const packagePosition = data_with_position_1.getPosition(dependenciesWithPosition[packageName]);
                if (!packageName.match(/^([a-zA-Z0-9-])+\/([a-zA-Z0-9-])+$/)) {
                    document.message(`Wrong elm package name ${packageName} given. Package ignored.`, packagePosition, "litvis:frontmatter:elm:dependencies");
                    continue;
                }
                let packageVersion = data_with_position_1.getValue(dependenciesWithPosition[packageName]);
                if (lodash_1.default.isFinite(packageVersion)) {
                    document.message(`Using numbers as elm package version is not recommended. Wrap the value into quotes to avoid misinterpreting.`, packagePosition, "litvis:frontmatter:elm:dependencies");
                    packageVersion = `${packageVersion}`;
                }
                if (packageVersion !== false && packageVersion !== "latest") {
                    if (lodash_1.default.isString(packageVersion) &&
                        packageVersion.match(/^\d+(\.\d+){0,2}$/)) {
                        document.message(`Installing custom package versions is not yet supported by elm 0.19. Falling back to latest.`, packagePosition, "litvis:frontmatter:elm:dependencies");
                    }
                    else {
                        document.message(`Wrong elm package version ${packageVersion} given. Package ignored.`, packagePosition, "litvis:frontmatter:elm:dependencies");
                        continue;
                    }
                }
                result.versions[packageName] =
                    packageVersion === false ? false : "latest";
                result.positions[packageName] = packageVersion;
            }
        }
    }
    return result;
};
//# sourceMappingURL=extractElmDependencies.js.map