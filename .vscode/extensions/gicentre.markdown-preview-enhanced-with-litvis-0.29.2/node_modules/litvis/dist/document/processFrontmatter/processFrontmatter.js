"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFrontmatter = void 0;
const data_with_position_1 = require("data-with-position");
const extractElmDependencies_1 = require("./extractElmDependencies");
const extractElmSourceDirectories_1 = require("./extractElmSourceDirectories");
const extractFollows_1 = require("./extractFollows");
const extractNarrativeSchemas_1 = require("./extractNarrativeSchemas");
const lintElm_1 = require("./lintElm");
const visitFrontmatter = (mdAst, document) => {
    const frontmatterNode = mdAst.children[0];
    if (!frontmatterNode) {
        return;
    }
    if (frontmatterNode.type === "toml") {
        document.message("Only yaml frontmatter is supported", frontmatterNode, "litvis:frontmatter-format");
        return;
    }
    if (frontmatterNode.type !== "yaml" || !frontmatterNode.position) {
        return;
    }
    // extract yaml pseudo ast
    let dataWithPosition;
    try {
        const valueWithOffset = "\n".repeat(frontmatterNode.position.start.line) + frontmatterNode.value;
        dataWithPosition = data_with_position_1.fromYaml(valueWithOffset);
        if (!frontmatterNode.data) {
            frontmatterNode.data = {};
        }
        frontmatterNode.data.dataWithPosition = dataWithPosition;
    }
    catch (e) {
        document.message(`Frontmatter is ignored because yaml could not be parsed: ${e.message}`, frontmatterNode, "litvis:frontmatter-parse");
        return;
    }
    lintElm_1.lintElm(dataWithPosition, document);
    const { value: litvisFollows, position: litvisFollowsPosition, } = extractFollows_1.extractFollows(dataWithPosition, document);
    document.data.litvisFollowsPath = litvisFollows;
    document.data.litvisFollowsPosition = litvisFollowsPosition;
    const { versions: elmDependencyVersions, positions: elmDependencyPositions, } = extractElmDependencies_1.extractElmDependencies(dataWithPosition, document);
    document.data.litvisElmDependencyVersions = elmDependencyVersions;
    document.data.litvisElmDependencyPositions = elmDependencyPositions;
    const { paths: elmSourceDirectoryPaths, positions: elmSourceDirectoryPositions, } = extractElmSourceDirectories_1.extractElmSourceDirectories(dataWithPosition, document);
    document.data.litvisElmSourceDirectoryPaths = elmSourceDirectoryPaths;
    document.data.litvisElmSourceDirectoryPositions = elmSourceDirectoryPositions;
    const { pathsWithPosition: narrativeSchemasWithPosition, } = extractNarrativeSchemas_1.extractNarrativeSchemas(dataWithPosition, document);
    document.data.litvisNarrativeSchemasWithPosition = narrativeSchemasWithPosition;
};
exports.processFrontmatter = () => {
    return function transformer(ast, vFile, next) {
        // try {
        visitFrontmatter(ast, vFile);
        // } catch (e) {
        //   console.log(e.stack);
        //   throw e;
        // }
        if (typeof next === "function") {
            return next(null, ast, vFile);
        }
        return ast;
    };
};
//# sourceMappingURL=processFrontmatter.js.map