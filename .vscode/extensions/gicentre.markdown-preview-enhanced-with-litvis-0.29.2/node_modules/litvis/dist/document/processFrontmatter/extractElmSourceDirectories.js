"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractElmSourceDirectories = void 0;
const data_with_position_1 = require("data-with-position");
const kind_of_1 = __importDefault(require("kind-of"));
const lodash_1 = __importDefault(require("lodash"));
exports.extractElmSourceDirectories = (dataWithPosition, document) => {
    const result = {
        paths: [],
        positions: [],
    };
    const sourceDirectoriesWithPosition = lodash_1.default.get(dataWithPosition, [
        "elm",
        "source-directories",
    ]);
    if (!sourceDirectoriesWithPosition) {
        return result;
    }
    const sourceDirectories = data_with_position_1.getValue(sourceDirectoriesWithPosition);
    if (lodash_1.default.isUndefined(sourceDirectories) || lodash_1.default.isNull(sourceDirectories)) {
        // do not do anything if elm source-directories are not defined
    }
    else if (!lodash_1.default.isArray(sourceDirectories)) {
        document.message(`‘elm.source-directories’ has to be an array, ${kind_of_1.default(sourceDirectories)} given. Value ignored.`, data_with_position_1.getPosition(sourceDirectoriesWithPosition), "litvis:frontmatter:elm");
    }
    else {
        sourceDirectoriesWithPosition.forEach((pathWithPosition, i) => {
            const path = data_with_position_1.getValue(pathWithPosition);
            const position = data_with_position_1.getPosition(pathWithPosition);
            if (typeof path !== "string") {
                document.message(`‘elm.source-directories[${i}]’ has to be a string, ${kind_of_1.default(path)} given. Value ignored.`, position, "litvis:frontmatter:elm:source-directories");
            }
            else if (path.match(/\n/g)) {
                document.message(`‘elm.source-directories[${i}]’ cannot contain newlines. Value ignored.`, position, "litvis:frontmatter:elm:source-directories");
            }
            else {
                const normalizedPath = path.trim();
                if (normalizedPath !== path) {
                    document.info(`Surrounded spaces in ‘elm.source-directories[${i}]’ were trimmed.`, position, "litvis:frontmatter:elm:source-directories");
                }
                result.paths.push(normalizedPath);
                result.positions.push(position);
            }
        });
    }
    return result;
};
//# sourceMappingURL=extractElmSourceDirectories.js.map