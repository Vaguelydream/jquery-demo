"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pairLabels = void 0;
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const utils_1 = require("../utils");
exports.pairLabels = () => (ast, vFile) => {
    return unist_util_visit_1.default(ast, "narrativeSchemaLabel", (labelNode, index, parent) => {
        if (labelNode.data.errorType ||
            labelNode.data.labelType !== "paired_opening") {
            return;
        }
        const nestedOpenLabelNodes = [];
        for (let i = index + 1; i < parent.children.length; i += 1) {
            const possibleMatch = parent.children[i];
            if (possibleMatch.type !== "narrativeSchemaLabel") {
                continue;
            }
            if (possibleMatch.data.labelType === "paired_closing" &&
                possibleMatch.data.labelName === labelNode.data.labelName &&
                !possibleMatch.data.errorType &&
                !possibleMatch.data.pairedId) {
                possibleMatch.data.pairedId = labelNode.data.id;
                labelNode.data.pairedId = possibleMatch.data.id;
                break;
            }
            if (possibleMatch.data.labelType === "paired_opening") {
                if (possibleMatch.data.pairedId) {
                    nestedOpenLabelNodes.unshift(possibleMatch);
                }
                else {
                    utils_1.markLabelNodeAsErroneous(vFile, labelNode, "brokenNesting", "There is an issue with pairing labels with each other. Make sure all labels are correctly nested and spelled.");
                    break;
                }
            }
            if (possibleMatch.data.labelType === "paired_closing") {
                if (!nestedOpenLabelNodes.length ||
                    nestedOpenLabelNodes[0].data.pairedId !== possibleMatch.data.id) {
                    utils_1.markLabelNodeAsErroneous(vFile, labelNode, "brokenNesting", "There is an issue with pairing labels with each other. Make sure all labels are correctly nested and spelled.");
                    break;
                }
                else {
                    nestedOpenLabelNodes.shift();
                }
            }
        }
    }, true /* reverse */);
};
//# sourceMappingURL=pairLabels.js.map