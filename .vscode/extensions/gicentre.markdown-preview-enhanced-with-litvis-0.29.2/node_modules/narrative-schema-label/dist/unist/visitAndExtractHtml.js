"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitAndExtractHtml = void 0;
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const renderHtmlTemplate_1 = require("../renderHtmlTemplate");
const utils_1 = require("../utils");
exports.visitAndExtractHtml = (ast, vFile, labelDefinitionsByName) => {
    return unist_util_visit_1.default(ast, "narrativeSchemaLabel", (labelNode) => {
        if (labelNode.data.errorType) {
            return;
        }
        const labelType = labelNode.data.labelType;
        const labelName = labelNode.data.labelName;
        const labelAttributes = labelNode.data.labelAttributes;
        const labelDefinition = labelDefinitionsByName[labelName];
        if (!labelDefinition) {
            utils_1.markLabelNodeAsErroneous(vFile, labelNode, "missingDefinition", `Label ${labelName} cannot be used because it does not exist in the linked narrative schemas or is not valid.`);
            return;
        }
        if (labelType === "single") {
            if (!labelDefinition.data.single) {
                utils_1.markLabelNodeAsErroneous(vFile, labelNode, "kindMisuse", `Label ${labelName} cannot be used as single (no-paired), according to the linked narrative schemas.`);
                return;
            }
            try {
                const html = renderHtmlTemplate_1.renderHtmlTemplate(labelDefinition.data.single.htmlTemplate, labelName, labelType, labelAttributes);
                labelNode.data.html = html;
            }
            catch (e) {
                utils_1.markLabelNodeAsErroneous(vFile, labelNode, "htmlTemplateException", `Label ${labelName} cannot be converted to html. Is htmlTemplate correct?`);
            }
            return;
        }
        if (!labelDefinition.data.paired) {
            utils_1.markLabelNodeAsErroneous(vFile, labelNode, "kindMisuse", `Label ${labelName} cannot be used as paired, according to the linked narrative schemas.`);
            return;
        }
        try {
            const html = renderHtmlTemplate_1.renderHtmlTemplate(labelDefinition.data.paired.htmlTemplate, labelName, labelType, labelAttributes);
            labelNode.data.html = html;
        }
        catch (e) {
            utils_1.markLabelNodeAsErroneous(vFile, labelNode, "htmlTemplateException", `Label ${labelName} cannot be converted to html. Is htmlTemplate correct?`);
        }
    });
};
//# sourceMappingURL=visitAndExtractHtml.js.map