"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDefinitions = void 0;
const data_with_position_1 = require("data-with-position");
const lodash_1 = __importDefault(require("lodash"));
const narrative_schema_common_1 = require("narrative-schema-common");
const getCompiledHandlebarsTemplate_1 = require("./getCompiledHandlebarsTemplate");
const utils_1 = require("./utils");
const extractDataFromLabel = (narrativeSchema, labelDataWithPosition, labelDataPath) => {
    let labelData = {};
    // ensure name exists
    const nameWithPosition = labelDataWithPosition.name;
    const kindOfName = data_with_position_1.getKind(nameWithPosition);
    if (kindOfName === "null" || kindOfName === "undefined") {
        narrativeSchema.message(`Expected label name to be defined as a string`, data_with_position_1.getPosition(nameWithPosition || labelDataWithPosition), "narrative-schema:label");
    }
    else if (kindOfName !== "string") {
        narrativeSchema.message(`Expected label name to be a string, got ${kindOfName}`, data_with_position_1.getPosition(nameWithPosition), "narrative-schema:label");
    }
    else {
        const name = data_with_position_1.getValue(nameWithPosition);
        if (!utils_1.isValidLabelName(name)) {
            narrativeSchema.message(`Expected label name to have a form of an identifier (i.e. to consist of latin characters, numbers or _)`, data_with_position_1.getPosition(nameWithPosition), "narrative-schema:label");
        }
        else {
            labelData.name = name;
        }
    }
    let containsBrokenTemplates = false;
    ["single", "paired"].forEach((labelKind) => {
        const htmlTemplateWithPosition = lodash_1.default.get(labelDataWithPosition, [
            labelKind,
            "htmlTemplate",
        ]);
        const kindOfHtmlTemplate = data_with_position_1.getKind(htmlTemplateWithPosition);
        if (kindOfHtmlTemplate === "null" || kindOfHtmlTemplate === "undefined") {
            return;
        }
        if (kindOfHtmlTemplate !== "string") {
            narrativeSchema.message(`Expected htmlTemplate to be a string, got ${kindOfHtmlTemplate}`, data_with_position_1.getPosition(htmlTemplateWithPosition), "narrative-schema:label");
        }
        try {
            const htmlTemplate = data_with_position_1.getValue(htmlTemplateWithPosition);
            getCompiledHandlebarsTemplate_1.getCompiledHandlebarsTemplate(htmlTemplate);
            labelData[labelKind] = {
                htmlTemplate,
            };
        }
        catch (e) {
            narrativeSchema.message(`Provided htmlTemplate is a valid handlebars template, please check its syntax`, data_with_position_1.getPosition(htmlTemplateWithPosition), "narrative-schema:label");
            containsBrokenTemplates = true;
        }
    });
    const kindOfAliasFor = data_with_position_1.getKind(labelDataWithPosition.aliasFor);
    if (kindOfAliasFor !== "null" && kindOfAliasFor !== "undefined") {
        if (kindOfAliasFor !== "string") {
            narrativeSchema.message(`Expected aliasFor to be a string, got ${kindOfAliasFor}`, data_with_position_1.getPosition(labelDataWithPosition.aliasFor), "narrative-schema:label");
        }
        else {
            const aliasFor = data_with_position_1.getValue(labelDataWithPosition.aliasFor);
            if (!utils_1.isValidLabelName(aliasFor)) {
                narrativeSchema.message(`Expected aliasFor to have a form of an identifier (i.e. to consist of latin characters, numbers or _)`, data_with_position_1.getPosition(labelDataWithPosition.aliasFor), "narrative-schema:label");
            }
            else {
                labelData.aliasFor = aliasFor;
            }
        }
    }
    if ((labelData.paired || labelData.single) && labelData.aliasFor) {
        narrativeSchema.message(`It is not allowed to declare a label as single or paired when it is an alias`, data_with_position_1.getPosition(labelDataWithPosition), "narrative-schema:label");
        labelData = null;
    }
    if (!containsBrokenTemplates &&
        !labelData.paired &&
        !labelData.single &&
        !labelData.aliasFor) {
        narrativeSchema.message(`Label should be declared as single, paired or aliasFor`, data_with_position_1.getPosition(labelDataWithPosition), "narrative-schema:label");
        labelData = null;
    }
    if (containsBrokenTemplates) {
        return null;
    }
    if (!labelData || !labelData.name) {
        return null;
    }
    return labelData;
};
exports.extractDefinitions = (dataWithPosition, narrativeSchema) => narrative_schema_common_1.extractArrayOfEntities(narrativeSchema, dataWithPosition, "labels", "label", extractDataFromLabel, {
    name: "",
    aliasFor: "",
    paired: { htmlTemplate: "" },
    single: { htmlTemplate: "" },
});
//# sourceMappingURL=extractDefinitions.js.map