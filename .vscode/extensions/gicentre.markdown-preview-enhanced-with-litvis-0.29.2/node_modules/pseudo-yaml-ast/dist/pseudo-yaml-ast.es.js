import { Kind, load } from 'yaml-ast-parser';
import isUndefined from 'lodash.isundefined';
import isNull from 'lodash.isnull';
import hasOwnProp from 'has-own-prop';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();













var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};









var newArrowCheck = function (innerThis, boundThis) {
  if (innerThis !== boundThis) {
    throw new TypeError("Cannot instantiate an arrow function");
  }
};

var _this = undefined;

var loc = Symbol('pseudo-yaml-ast-loc');

var isPrimitive = function (v) {
  newArrowCheck(this, _this);
  return Number.isNaN(v) || isNull(v) || isUndefined(v) || (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'symbol';
}.bind(undefined);

var isPrimitiveNode = function (node) {
  newArrowCheck(this, _this);
  return isPrimitive(node.value) || !hasOwnProp(node, 'value');
}.bind(undefined);

var getLoc = function (input, _ref) {
  var _ref$start = _ref.start,
      start = _ref$start === undefined ? 0 : _ref$start,
      _ref$end = _ref.end,
      end = _ref$end === undefined ? 0 : _ref$end;
  newArrowCheck(this, _this);

  var lines = input.split(/\n/);

  var loc = {
    start: {},
    end: {}
  };

  var isBetween = function (start, pos, end) {
    newArrowCheck(this, _this);
    return pos <= end && pos >= start;
  }.bind(this);

  var sum = 0;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = lines.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var i = _step.value;

      var line = lines[i];
      var ls = sum;
      var le = sum + line.length + 1; // +1 because the break is also a char

      if (isUndefined(loc.start.line) && isBetween(ls, start, le)) {
        loc.start.line = i + 1;
        loc.start.column = start - ls;
      }

      if (isUndefined(loc.end.line) && isBetween(ls, end, le)) {
        loc.end.line = i + 1;
        loc.end.column = end - ls;
      }

      sum = le;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return loc;
}.bind(undefined);

var visitors = {
  MAP: function MAP() {
    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    newArrowCheck(this, _this);
    return Object.assign(walk(node.mappings, input), defineProperty({}, loc, getLoc(input, {
      start: node.startPosition,
      end: node.endPosition
    })));
  }.bind(undefined),
  MAPPING: function MAPPING() {
    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    newArrowCheck(this, _this);

    var value = walk([node.value], input);

    if (!isPrimitive(value)) {
      value[loc] = getLoc(input, {
        start: node.startPosition,
        end: node.endPosition
      });
    }

    return Object.assign(ctx, defineProperty({}, node.key.value, value));
  }.bind(undefined),
  SCALAR: function SCALAR() {
    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    newArrowCheck(this, _this);

    if (isPrimitiveNode(node)) {
      return node.value;
    }

    var _loc = getLoc(input, {
      start: node.startPosition,
      end: node.endPosition
    });

    var wrappable = function (Constructor) {
      newArrowCheck(this, _this);
      return function () {
        newArrowCheck(this, _this);

        var v = new Constructor(node.value);
        v[loc] = _loc;
        return v;
      }.bind(this);
    }.bind(this);

    var object = function () {
      newArrowCheck(this, _this);

      node.value[loc] = _loc;
      return node.value;
    }.bind(this);

    var types = {
      boolean: wrappable(Boolean),
      number: wrappable(Number),
      string: wrappable(String),
      function: object,
      object: object
    };

    return types[_typeof(node.value)]();
  }.bind(undefined),
  SEQ: function SEQ() {
    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    newArrowCheck(this, _this);

    var items = walk(node.items, input, []);

    items[loc] = getLoc(input, {
      start: node.startPosition,
      end: node.endPosition
    });

    return items;
  }.bind(undefined)
};

var walk = function () {
  var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var input = arguments[1];
  var ctx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  newArrowCheck(this, _this);

  var onNode = function (node, ctx, fallback) {
    newArrowCheck(this, _this);

    var visitor = visitors[Kind[node.kind]];
    return visitor ? visitor(node, input, ctx) : fallback;
  }.bind(this);

  var walkObj = function () {
    newArrowCheck(this, _this);
    return nodes.reduce(function (sum, node) {
      newArrowCheck(this, _this);

      return onNode(node, sum, sum);
    }.bind(this), ctx);
  }.bind(this);

  var walkArr = function () {
    newArrowCheck(this, _this);
    return nodes.map(function (node) {
      newArrowCheck(this, _this);
      return onNode(node, ctx, null);
    }.bind(this), ctx).filter(Boolean);
  }.bind(this);

  return Array.isArray(ctx) ? walkArr() : walkObj();
}.bind(undefined);

var index = (function (input) {
  newArrowCheck(this, _this);
  return walk([load(input)], input);
}).bind(undefined);

export { loc };
export default index;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,