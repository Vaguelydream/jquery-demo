"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractArrayOfEntities = void 0;
const data_with_position_1 = require("data-with-position");
const reportUnusedDataKeys_1 = require("./reportUnusedDataKeys");
exports.extractArrayOfEntities = (narrativeSchema, dataWithPosition, dataKeyForEntityArray, entityName, extractData, shapeOfExpectedData) => {
    const listOfEntitiesWithPosition = dataWithPosition[dataKeyForEntityArray];
    const kindOfListOfEntities = data_with_position_1.getKind(listOfEntitiesWithPosition);
    if (kindOfListOfEntities === "null" || kindOfListOfEntities === "undefined") {
        return [];
    }
    if (kindOfListOfEntities !== "array") {
        narrativeSchema.message(`Expected ${dataKeyForEntityArray} to be an array, got ${kindOfListOfEntities}`, data_with_position_1.getPosition(listOfEntitiesWithPosition), `narrative-schema:${entityName}`);
        return [];
    }
    const result = [];
    for (let i = 0; i < listOfEntitiesWithPosition.length; i += 1) {
        const entityDataPath = [dataKeyForEntityArray, i];
        const entityDataWithPosition = listOfEntitiesWithPosition[i];
        const kindOfEntityData = data_with_position_1.getKind(entityDataWithPosition);
        if (kindOfEntityData !== "object") {
            narrativeSchema.message(`Expected ${entityName} to be an object, got ${kindOfEntityData}`, data_with_position_1.getPosition(entityDataWithPosition), `narrative-schema:${entityName}`);
            continue;
        }
        const entityData = extractData(narrativeSchema, entityDataWithPosition, entityDataPath);
        reportUnusedDataKeys_1.reportUnusedDataKeys(narrativeSchema, entityDataWithPosition, shapeOfExpectedData, [], entityName);
        if (!entityData) {
            narrativeSchema.info(`Skipping ${entityName} ${i + 1} due to declaration issues`, data_with_position_1.getPosition(entityDataWithPosition), `narrative-schema:${entityName}`);
        }
        else {
            result.push({
                data: entityData,
                dataWithPosition: entityDataWithPosition,
                dataPath: entityDataPath,
            });
        }
    }
    return result;
};
//# sourceMappingURL=extractArrayOfEntities.js.map